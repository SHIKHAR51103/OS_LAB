Q1. WRITE A C PROGRAM TO IMPLEMENT ORPHAN PROCESS.

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t child_pid =fork();
    
    if (child_pid == 0){
        printf(" CHILD PROCESS  ( PID : %d ) WITH PARENT PID : %d\n " , getpid(), getppid());
        sleep(2);
        printf(" CHILD PROCESS  (PID : %d )  EXITING\n", getpid());
    }
    else if (child_pid > 0)
    {
        printf(" PARENT PROCESS (PID : %d) ", getpid());
        sleep(1);
        printf("PARENT PROCESS (PID : %d) EXITING ", getpid());
        
    }
    else{
        
        printf(" FORK FAILED \n");
        return 1;
    }
    
    return 0;
}



Q2. WRITE A C PROGRAM TO IMPLEMENT ZOMBIE PROCESS .

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t child_pid =fork();
    
    if (child_pid == 0){
        printf(" CHILD PROCESS  ( PID : %d ) WITH PARENT PID : %d\n " , getpid(), getppid());
        printf(" CHILD PROCESS EXITING\n");
    }
    else if (child_pid > 0)
    {
        printf(" PARENT PROCESS (PID : %d) ", getpid());
        sleep(2);
        printf("PARENT PROCESS (PID : %d) EXITING ", getpid());
        
    }
    else{
        
        printf(" FORK FAILED \n");
        return 1;
    }
    
    return 0;
}



Q3. WRITE A C PROGRAM TO IMPLEMENT FIRST - COME - FIRST - SERVE SCHEDULING ALGORITHM . 

#include <stdio.h>

struct Process{
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
};

void calculateTimes(struct Process p[] , int n){
    p[0].waitingTime=0;
    p[0].turnaroundTime = p[0].burstTime;
    
    for(int i=1 ; i<n ; i++){
        p[i].waitingTime = p[i-1].waitingTime + p[i-1].burstTime;
        p[i].turnaroundTime = p[i].waitingTime + p[i].burstTime;
    }
}

void displayTable(struct Process p[] , int n){
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n ");
    for(int i=0 ; i < n; i++){
        printf(" %d\t%d\t\t%d\t\t%d\n", p[i].id , p[i].arrivalTime , p[i].burstTime , p[i].waitingTime , p[i].turnaroundTime );
        
    }
}


int main() {
    int n;
    printf(" ENTER THE NO. OF PROCESSES :  : ");
    scanf("%d" , &n);
    
    
    struct Process p[n];
    
    for(int i=0 ; i < n ; i++)
    {
        p[i].id=i+1;
        printf("  ENTER ARRIVAL TIME FOR PROCESS %d: ", i + 1);
        scanf("%d" , &p[i].arrivalTime);
        printf(" ENTER BURST TIME FOR PROCESS %d :" , i+1 );
        scanf("%d" ,&p[i].burstTime);
    }
    
    calculateTimes(p,n);
    displayTable(p,n);
    
    
    return 0;
}



Q3.WRITE A C PROGRAM TO IMPLEMENT FIRST COME FIRST SERVE SCHEDULING ALGORITHM .

#include <stdio.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
};

void calculateTimes(struct Process p[], int n) {
    p[0].waitingTime = 0;
    p[0].turnaroundTime = p[0].burstTime;

    for (int i = 1; i < n; i++) {
        p[i].waitingTime = p[i - 1].waitingTime + p[i - 1].burstTime;
        p[i].turnaroundTime = p[i].waitingTime + p[i].burstTime;
    }
}

void displayTable(struct Process p[], int n) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].id, p[i].arrivalTime,
               p[i].burstTime, p[i].waitingTime,
               p[i].turnaroundTime);
    }
}

int main() {
    int n;
    printf("Enter the number of process : ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burstTime);
    }

    calculateTimes(p, n);
    displayTable(p, n);

    return 0;
}


Q4. WRITE A C PROGRAM TO IMPLEMENT SHORTEST JOB FIRST ALGORITHM.

#include <stdio.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortprocesses(struct Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].burstTime > p[j + 1].burstTime) {
                swap(&p[j], &p[j + 1]);
            }
        }
    }
}

void calculateTimes(struct Process p[], int n) {
    p[0].waitingTime = 0;
    p[0].turnaroundTime = p[0].burstTime;

    for (int i = 1; i < n; i++) {
        p[i].waitingTime = p[i - 1].waitingTime + p[i - 1].burstTime;
        p[i].turnaroundTime = p[i].waitingTime + p[i].burstTime;
    }
}

void displayTable(struct Process p[], int n) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].id, p[i].arrivalTime,
               p[i].burstTime, p[i].waitingTime,
               p[i].turnaroundTime);
    }
}

int main() {
    int n;
    printf("Enter the number of p: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burstTime);
    }

    sortp(p, n);
    calculateTimes(p, n);
    displayTable(p, n);

    return 0;
}



















