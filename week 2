Q1. WRITE A C PROGRAM TO IMPLEMENT ORPHAN PROCESS.

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t child_pid =fork();
    
    if (child_pid == 0){
        printf(" CHILD PROCESS  ( PID : %d ) WITH PARENT PID : %d\n " , getpid(), getppid());
        sleep(2);
        printf(" CHILD PROCESS  (PID : %d )  EXITING\n", getpid());
    }
    else if (child_pid > 0)
    {
        printf(" PARENT PROCESS (PID : %d) ", getpid());
        sleep(1);
        printf("PARENT PROCESS (PID : %d) EXITING ", getpid());
        
    }
    else{
        
        printf(" FORK FAILED \n");
        return 1;
    }
    
    return 0;
}



Q2. WRITE A C PROGRAM TO IMPLEMENT ZOMBIE PROCESS .

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t child_pid =fork();
    
    if (child_pid == 0){
        printf(" CHILD PROCESS  ( PID : %d ) WITH PARENT PID : %d\n " , getpid(), getppid());
        printf(" CHILD PROCESS EXITING\n");
    }
    else if (child_pid > 0)
    {
        printf(" PARENT PROCESS (PID : %d) ", getpid());
        sleep(2);
        printf("PARENT PROCESS (PID : %d) EXITING ", getpid());
        
    }
    else{
        
        printf(" FORK FAILED \n");
        return 1;
    }
    
    return 0;
}



Q3. WRITE A C PROGRAM TO IMPLEMENT FIRST - COME - FIRST - SERVE SCHEDULING ALGORITHM . 


