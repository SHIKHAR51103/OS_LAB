#include <stdio.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
    int responseTime; // Added response time
};

void swap(struct Process *a, struct Process *b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcesses(struct Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].burstTime > p[j + 1].burstTime) {
                swap(&p[j], &p[j + 1]);
            }
        }
    }
}

void calculateTimes(struct Process p[], int n) {
    p[0].waitingTime = 0;
    p[0].turnaroundTime = p[0].burstTime;
    p[0].responseTime = p[0].waitingTime; // Response time for the first process is the same as waiting time

    for (int i = 1; i < n; i++) {
        p[i].waitingTime = p[i - 1].waitingTime + p[i - 1].burstTime;
        p[i].responseTime = p[i].waitingTime; // Response time is the waiting time for non-preemptive scheduling
        p[i].turnaroundTime = p[i].waitingTime + p[i].burstTime;
    }
}

void displayTable(struct Process p[], int n) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\tResponse Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].id, p[i].arrivalTime,
               p[i].burstTime, p[i].waitingTime,
               p[i].turnaroundTime, p[i].responseTime);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burstTime);
    }

    sortProcesses(p, n);
    calculateTimes(p, n);
    displayTable(p, n);

    // Calculate averages
    float avgWaitingTime = 0, avgTurnaroundTime = 0, avgResponseTime = 0;

    for (int i = 0; i < n; i++) {
        avgWaitingTime += p[i].waitingTime;
        avgTurnaroundTime += p[i].turnaroundTime;
        avgResponseTime += p[i].responseTime;
    }

    avgWaitingTime /= n;
    avgTurnaroundTime /= n;
    avgResponseTime /= n;

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Response Time: %.2f\n", avgResponseTime);

    return 0;
}




----------------------------------------------------------------------------------------------------




#include <stdio.h>

struct Process {
    int id;
    int burstTime;
    int remainingTime;
    int arrivalTime;
    int startTime; // Added start time
    int endTime;   // Added end time
    int waitingTime;
    int turnaroundTime;
    int responseTime;
};

void roundRobinScheduling(struct Process processes[], int n, int quantum) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0 && processes[i].arrivalTime <= currentTime) {
                if (processes[i].remainingTime <= quantum) {
                    currentTime += processes[i].remainingTime;
                    processes[i].endTime = currentTime;
                    processes[i].remainingTime = 0;
                    printf("Process %d completed at time %d\n", processes[i].id, currentTime);
                    completed++;
                } else {
                    currentTime += quantum;
                    processes[i].remainingTime -= quantum;
                }
            }
        }
    }
}

void calculateTimes(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaroundTime = processes[i].endTime - processes[i].arrivalTime;
        processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
        processes[i].responseTime = processes[i].startTime - processes[i].arrivalTime;
    }
}

void displayTable(struct Process processes[], int n) {
    printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\tResponse Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id, processes[i].burstTime,
               processes[i].arrivalTime, processes[i].waitingTime,
               processes[i].turnaroundTime, processes[i].responseTime);
    }
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    roundRobinScheduling(processes, n, quantum);
    calculateTimes(processes, n);
    displayTable(processes, n);

    // Calculate averages
    float avgWaitingTime = 0, avgTurnaroundTime = 0, avgResponseTime = 0;

    for (int i = 0; i < n; i++) {
        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
        avgResponseTime += processes[i].responseTime;
    }

    avgWaitingTime /= n;
    avgTurnaroundTime /= n;
    avgResponseTime /= n;

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Response Time: %.2f\n", avgResponseTime);

    return 0;
}




----------------------------------------------------------------------------------------------------------------



#include <stdio.h>

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int response_time;
};

void findWaitingTime(struct Process p[], int n) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        int shortest = -1;
        int shortestTime = 9999;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival_time <= currentTime && p[i].remaining_time < shortestTime && p[i].remaining_time > 0) {
                shortest = i;
                shortestTime = p[i].remaining_time;
            }
        }

        if (shortest == -1) {
            currentTime++;
        } else {
            p[shortest].remaining_time--;
            currentTime++;

            if (p[shortest].remaining_time == 0) {
                completed++;
                p[shortest].completion_time = currentTime;
                p[shortest].turnaround_time = p[shortest].completion_time - p[shortest].arrival_time;
                p[shortest].waiting_time = p[shortest].turnaround_time - p[shortest].burst_time;
                p[shortest].response_time = p[shortest].waiting_time; // Response time for non-preemptive scheduling
            }
        }
    }
}

void findTurnaroundTime(struct Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;
    }
}

void findAverageTime(struct Process p[], int n) {
    findWaitingTime(p, n);
    findTurnaroundTime(p, n);

    float totalWaitingTime = 0, totalTurnaroundTime = 0, totalResponseTime = 0;

    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\tResponse Time\n");

    for (int i = 0; i < n; i++) {
        totalWaitingTime += p[i].waiting_time;
        totalTurnaroundTime += p[i].turnaround_time;
        totalResponseTime += p[i].response_time;

        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               p[i].process_id, p[i].arrival_time, p[i].burst_time,
               p[i].completion_time, p[i].turnaround_time,
               p[i].waiting_time, p[i].response_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaroundTime / n);
    printf("Average Response Time: %.2f\n", totalResponseTime / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].process_id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &p[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
    }

    findAverageTime(p, n);

    return 0;
}






---------------------------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>

// Function to find the page to be replaced in the future
int findOptimal(int pages[], int n, int frame[], int m, int index)
{
    int res = -1, farthest = index;
    for (int i = 0; i < m; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If the page is not present in frames, return it.
        if (j == n)
            return i;
    }

    // If all frames contain pages, return the one to be replaced.
    return (res == -1) ? 0 : res;
}

// Function to implement Optimal Page Replacement Policy
void optimalPageReplacement(int pages[], int n, int capacity)
{
    int frame[capacity];
    int faults = 0;

    for (int i = 0; i < capacity; i++)
        frame[i] = -1;

    for (int i = 0; i < n; i++) {
        // Check if the page is already in the frame
        int hit = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                break;
            }
        }

        // If the page is not present in the frames
        if (hit == 0) {
            int pageToBeReplaced = findOptimal(pages, n, frame, capacity, i + 1);
            frame[pageToBeReplaced] = pages[i];
            faults++;
        }

        // Print the current state of frames
        printf("Frames after page %d: ", pages[i]);
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == -1)
                printf(" - ");
            else
                printf(" %d ", frame[j]);
        }
        printf("\n");
    }

    printf("Number of page faults: %d\n", faults);
}

int main()
{
    int n, capacity;

    // Input the number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    // Input the pages
    int pages[n];
    printf("Enter the sequence of page numbers:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    // Input the number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &capacity);

    // Call the function to implement Optimal Page Replacement
    optimalPageReplacement(pages, n, capacity);

    return 0;
}










---------------------------------------------------------------------------------------------------------------------



#include <stdio.h>
#include <stdlib.h>

// Function to find the index of the least recently used page in the frame
int findLRU(int pages[], int n, int frame[], int m, int index)
{
    int res = -1, farthest = index;
    for (int i = 0; i < m; i++) {
        int j;
        for (j = index - 1; j >= 0; j--) {
            if (frame[i] == pages[j]) {
                if (j < farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If the page is not present in frames, return it.
        if (j == -1)
            return i;
    }

    // If all frames contain pages, return the one to be replaced.
    return (res == -1) ? 0 : res;
}

// Function to implement LRU Page Replacement Policy
void lruPageReplacement(int pages[], int n, int capacity)
{
    int frame[capacity];
    int faults = 0;

    for (int i = 0; i < capacity; i++)
        frame[i] = -1;

    for (int i = 0; i < n; i++) {
        // Check if the page is already in the frame
        int hit = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                break;
            }
        }

        // If the page is not present in the frames
        if (hit == 0) {
            int pageToBeReplaced = findLRU(pages, n, frame, capacity, i);
            frame[pageToBeReplaced] = pages[i];
            faults++;
        }

        // Print the current state of frames
        printf("Frames after page %d: ", pages[i]);
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == -1)
                printf(" - ");
            else
                printf(" %d ", frame[j]);
        }
        printf("\n");
    }

    printf("Number of page faults: %d\n", faults);
}

int main()
{
    int n, capacity;

    // Input the number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &n);

    // Input the pages
    int pages[n];
    printf("Enter the sequence of page numbers:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    // Input the number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &capacity);

    // Call the function to implement LRU Page Replacement
    lruPageReplacement(pages, n, capacity);

    return 0;
}




---------------------------------------------------------------------------------------------------------------------




#include <stdio.h>
#include <stdlib.h>

// Function to implement FCFS Disk Scheduling Algorithm
void fcfsDiskScheduling(int requests[], int n)
{
    int head, seek_sequence[n + 1];
    int total_seek_time = 0;

    // Input the initial position of the disk head
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    seek_sequence[0] = head;

    // Calculate the total seek time
    for (int i = 0; i < n; i++) {
        seek_sequence[i + 1] = requests[i];
        total_seek_time += abs(head - requests[i]);
        head = requests[i];
    }

    // Print the seek sequence
    printf("Seek Sequence: ");
    for (int i = 0; i <= n; i++)
        printf("%d ", seek_sequence[i]);
    printf("\n");

    // Print the total seek time
    printf("Total Seek Time: %d\n", total_seek_time);
}

int main()
{
    int n;

    // Input the number of disk I/O requests
    printf("Enter the number of disk I/O requests: ");
    scanf("%d", &n);

    // Input the disk I/O requests
    int requests[n];
    printf("Enter the sequence of disk I/O requests:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &requests[i]);

    // Call the function to implement FCFS Disk Scheduling
    fcfsDiskScheduling(requests, n);

    return 0;
}









---------------------------------------------------------------------------------------------------------------------



#include <stdio.h>
#include <stdlib.h>

// Function to implement SCAN Disk Scheduling Algorithm
void scanDiskScheduling(int requests[], int n, int head, int direction)
{
    int seek_sequence[n + 1];
    int total_seek_time = 0;
    int index, i;

    // Sorting the requests
    int sorted_requests[n + 1];
    for (i = 0; i < n; i++)
        sorted_requests[i] = requests[i];
    sorted_requests[n] = head;
    n++;

    for (i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (sorted_requests[i] > sorted_requests[j]) {
                int temp = sorted_requests[i];
                sorted_requests[i] = sorted_requests[j];
                sorted_requests[j] = temp;
            }
        }
    }

    // Finding the index of the head in the sorted array
    for (i = 0; i < n; i++) {
        if (head == sorted_requests[i])
            break;
    }
    index = i;

    // Determine the direction
    if (direction == 0) {
        // Moving towards the right
        for (i = index; i < n; i++) {
            seek_sequence[i - index] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }

        // Moving towards the left
        for (i = index - 1; i >= 0; i--) {
            seek_sequence[index - i + n - 1] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }
    } else if (direction == 1) {
        // Moving towards the left
        for (i = index; i >= 0; i--) {
            seek_sequence[index - i] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }

        // Moving towards the right
        for (i = index + 1; i < n; i++) {
            seek_sequence[i - index + n] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }
    }

    // Print the seek sequence
    printf("Seek Sequence: ");
    for (i = 0; i <= n; i++)
        printf("%d ", seek_sequence[i]);
    printf("\n");

    // Print the total seek time
    printf("Total Seek Time: %d\n", total_seek_time);
}

int main()
{
    int n, head, direction;

    // Input the number of disk I/O requests
    printf("Enter the number of disk I/O requests: ");
    scanf("%d", &n);

    // Input the disk I/O requests
    int requests[n];
    printf("Enter the sequence of disk I/O requests:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &requests[i]);

    // Input the initial position of the disk head
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    // Input the direction (0 for right, 1 for left)
    printf("Enter the direction (0 for right, 1 for left): ");
    scanf("%d", &direction);

    // Call the function to implement SCAN Disk Scheduling
    scanDiskScheduling(requests, n, head, direction);

    return 0;
}



---------------------------------------------------------------------------------------------------------------------




#include <stdio.h>
#include <stdlib.h>

// Function to implement LOOK Disk Scheduling Algorithm
void lookDiskScheduling(int requests[], int n, int head, int direction)
{
    int seek_sequence[n + 1];
    int total_seek_time = 0;
    int index, i;

    // Sorting the requests
    int sorted_requests[n + 1];
    for (i = 0; i < n; i++)
        sorted_requests[i] = requests[i];
    sorted_requests[n] = head;
    n++;

    for (i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (sorted_requests[i] > sorted_requests[j]) {
                int temp = sorted_requests[i];
                sorted_requests[i] = sorted_requests[j];
                sorted_requests[j] = temp;
            }
        }
    }

    // Finding the index of the head in the sorted array
    for (i = 0; i < n; i++) {
        if (head == sorted_requests[i])
            break;
    }
    index = i;

    // Determine the direction
    if (direction == 0) {
        // Moving towards the right
        for (i = index; i < n; i++) {
            seek_sequence[i - index] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }
    } else if (direction == 1) {
        // Moving towards the left
        for (i = index; i >= 0; i--) {
            seek_sequence[index - i] = sorted_requests[i];
            total_seek_time += abs(head - sorted_requests[i]);
            head = sorted_requests[i];
        }
    }

    // Print the seek sequence
    printf("Seek Sequence: ");
    for (i = 0; i <= n; i++)
        printf("%d ", seek_sequence[i]);
    printf("\n");

    // Print the total seek time
    printf("Total Seek Time: %d\n", total_seek_time);
}

// Function to implement C-LOOK Disk Scheduling Algorithm
void cLookDiskScheduling(int requests[], int n, int head)
{
    int seek_sequence[n + 1];
    int total_seek_time = 0;
    int index, i;

    // Sorting the requests
    int sorted_requests[n + 1];
    for (i = 0; i < n; i++)
        sorted_requests[i] = requests[i];
    sorted_requests[n] = head;
    n++;

    for (i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (sorted_requests[i] > sorted_requests[j]) {
                int temp = sorted_requests[i];
                sorted_requests[i] = sorted_requests[j];
                sorted_requests[j] = temp;
            }
        }
    }

    // Finding the index of the head in the sorted array
    for (i = 0; i < n; i++) {
        if (head == sorted_requests[i])
            break;
    }
    index = i;

    // Moving towards the right
    for (i = index; i < n; i++) {
        seek_sequence[i - index] = sorted_requests[i];
        total_seek_time += abs(head - sorted_requests[i]);
        head = sorted_requests[i];
    }

    // Moving towards the left
    for (i = 0; i < index; i++) {
        seek_sequence[n - index + i] = sorted_requests[i];
        total_seek_time += abs(head - sorted_requests[i]);
        head = sorted_requests[i];
    }

    // Print the seek sequence
    printf("Seek Sequence: ");
    for (i = 0; i <= n; i++)
        printf("%d ", seek_sequence[i]);
    printf("\n");

    // Print the total seek time
    printf("Total Seek Time: %d\n", total_seek_time);
}

int main()
{
    int n, head, direction;

    // Input the number of disk I/O requests
    printf("Enter the number of disk I/O requests: ");
    scanf("%d", &n);

    // Input the disk I/O requests
    int requests[n];
    printf("Enter the sequence of disk I/O requests:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &requests[i]);

    // Input the initial position of the disk head
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    // Input the direction (0 for right, 1 for left)
    printf("Enter the direction (0 for right, 1 for left): ");
    scanf("%d", &direction);

    // Call the function to implement LOOK Disk Scheduling
    lookDiskScheduling(requests, n, head, direction);

    // Call the function to implement C-LOOK Disk Scheduling
    cLookDiskScheduling(requests, n, head);

    return 0;
}





